import picamera2
import time
import cv2

camera = None
arucoDetector = None

def init(res: tuple = (1920, 1080)):
    global camera, arucoDetector  # Use global variables

    try:
        # Try to initialize the first available camera (index 0)
        camera = picamera2.Picamera2()
        
        # If you have multiple cameras, try specifying the camera index like this:
        # camera = picamera2.Picamera2(camera_index=0)  # Change the index if you have multiple cameras
        
        # Create video configuration
        config = camera.create_video_configuration(
            main={"size": res, "format": "RGB888"}, buffer_count=6
        )
        camera.configure(config)
        camera.start()
        
        time.sleep(1)  # Allow the camera to fully wake up
        print("Camera initialization complete")

        # Initialize ArUco detector
        arucoDict = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_4X4_50)
        arucoParams = cv2.aruco.DetectorParameters_create()  # Correct method to create parameters
        arucoDetector = (arucoDict, arucoParams)  # Store the dictionary and parameters tuple

    except IndexError as e:
        print(f"Error: {e}")
        print("Please check if the camera is connected properly and available.")
    except Exception as e:
        print(f"Unexpected error occurred: {e}")

def get_tags():
    global camera, arucoDetector

    try:
        # Capture an image from the camera
        image = camera.capture_array()  # Returns image as numpy array

        # Detect ArUco markers in the image
        arucoDict, arucoParams = arucoDetector  # Unpack the ArUco detector tuple
        corners, ids, rejected = cv2.aruco.detectMarkers(image, arucoDict, parameters=arucoParams)
        
        # Check if any markers were detected
        if ids is not None:
            print("Detected markers:", ids)
            return corners, ids
        else:
            print("No markers detected.")
            return None, None
    except Exception as e:
        print(f"Error during marker detection: {e}")
        return None, None

def scan_for_tags():
    # Infinite loop to scan for tags continuously
    while True:
        corners, ids = get_tags()  # Capture and process the image
        
        # Optional: You can draw the markers on the image for visualization
        if corners is not None:
            # Draw detected markers on the image
            cv2.aruco.drawDetectedMarkers(image, corners, ids)
            # Display the image with markers drawn
            cv2.imshow("ArUco Marker Detection", image)

        # Exit loop if the user presses 'q'
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Clean up and release resources
    cv2.destroyAllWindows()

# Example usage:
init()  # Initialize the camera and ArUco detector
scan_for_tags()  # Continuously scan for ArUco tags
